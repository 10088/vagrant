#compdef _vagrant vagrant

# ZSH completion for Vagrant
#
# To use this completion add this to ~/.zshrc
# fpath=(/path/to/this/dir $fpath)
# compinit
#
# For development reload the function after making changes
# unfunction _vagrant && autoload -U _vagrant 

__box_list ()
{
    _wanted application expl 'command' compadd $(command vagrant box list | awk '{print $1}' )
}

__plugin_list ()
{
    _wanted application expl 'command' compadd $(command vagrant plugin list | awk '{print $1}')
}

function _vagrant () {

    local -a sub_commands && sub_commands=(
        'box:manages everything related to Vagrant Cloud'
        'destroy:stops and deletes all traces of the vagrant machine'
        'global-status:outputs status Vagrant environments for this user'
        'halt:stops the vagrant machine'
        'help:shows the help for a subcommand'
        'init:initializes a new Vagrant environment by creating a Vagrantfile'
        'package:packages a running vagrant environment into a box'
        'plugin:manages plugins: install, uninstall, update, etc.'
        'port:displays information about guest port mappings'
        'powershell:connects to machine via powershell remoting'
        'provision:provisions the vagrant machine'
        'push:deploys code in this environment to a configured destination'
        'rdp:connects to machine via RDP'
        'reload:restarts vagrant machine, loads new Vagrantfile configuration'
        'resume:resume a suspended vagrant machine'
        'snapshot:manages snapshots; saving, restoring, etc.'
        'ssh:connects to machine via SSH'
        'ssh-config:outputs OpenSSH valid configuration to connect to the machine'
        'status:outputs status of the vagrant machine'
        'suspend:suspends the machine'
        'up:starts and provisions the vagrant environment'
        'upload:upload to machine via communicator'
        'validate:validates the Vagrantfile'
        'version:prints current and latest Vagrant version'
        'winrm:executes commands on a machine via WinRM'
        'winrm-config:outputs WinRM configuration to connect to the machine'
    )
    
    local -a _box_arguments && _box_arguments=(
        'add:NAME URI Add a box to the system'
        'help:COMMAND Describe subcommands or one specific subcommand'
        'list:Lists all installed boxes'
        'outdated:Checks if there is a new version available for the box'
        'prune:Removes boxes'
        'remove:NAME Remove a box from the system'
        'repackage:NAME Repackage an installed box into a `.box` file.'
        'update:Updates the box, if there any updates available'
    )

    local -a _snapshot_arguments && _snapshot_arguments=(
        'delete:Delete a snapshot taken previously with snapshot save'
        'list:List all snapshots taken for a machine'
        'pop:Restore state that was pushed onto the snapshot stack'
        'push:Take a snapshot of the current state of the machine and push it onto the stack of states'
        'restore:Restore a snapshot taken previously with snapshot save.'
        'save:Take a snapshot of the current state of the machine'
    )

    local -a _plugin_arguments && _plugin_arguments=(
      'expunge:'
      'install:'
      'license:'
      'list:'
      'repair:'
      'uninstall:'
      'update:'
    )

    local -a common_arguments && common_arguments=(
      '--(no-)color=[Enable or disable color output]'
      '--machine-readable=[Enable machine readable output]'
      '--debug=[Enable debug output]'
      '--timestamp=[Enable timestamps on log output]'
      '--debug-timestamp=[Enable debug output with timestamp]'
      '--no-tty=[Enable non-interactive output]'
      '--help=[Print help message]'
    )

    local -a destroy_arguments && destroy_arguments=(
      '--force=[Destroy without confirmation]'
      '--(no-)parallel=[Enable or disable parallelism if provider supports it]'
    )

    local -a global_status_arguments && global_status_arguments=(
      '--prune=[Prune invalid entries]'
    )

    local -a halt_arguments && halt_arguments=(
      '--force=[Force shut down (equivalent of pulling power)]'
    )

    local -a init_arguments && init_arguments=(
      '--box-version VERSION=[Version of the box to add]'
      '--force=[Overwrite existing Vagrantfile]'
      '--minimal=[Use minimal Vagrantfile template (no help comments). Ignored with --template]'
      '--output FILE=[Output path for the box. "-" for stdout]'
      '--template FILE=[Path to custom Vagrantfile template]'
    )

    local -a package_arguments && package_arguments=(
      '--base NAME=[Name of a VM in VirtualBox to package as a base box (VirtualBox Only)]'
      '--output NAME=[Name of the file to output]'
      '--include FILE,FILE=[Comma separated additional files to package with the box]'
      '--vagrantfile FILE=[Vagrantfile to package with the box]'
    )

    local -a port_arguments && port_arguments=(
      '--guest=[NOutput the host port that maps to the given guest port]'
    )

    local -a powershell_arguments && powershell_arguments=(
      '--command COMMAND=[Execute a powershell command directly]'
      '--elevated=[Execute a powershell command with elevated permissions]'
    )

    local -a provision_arguments && provision_arguments=(
      '--provision-with x,y,z=[Enable only certain provisioners, by type or by name]'
    )

    local -a reload_arguments && reload_arguments=(
      '--(no-)provision=[Enable or disable provisioning]'
      '--provision-with x,y,z=[Enable only certain provisioners, by type or by name]'
      '--force=[Force shut down (equivalent of pulling power)]'
    )

    local -a resume_arguments && resume_arguments=(
      '--(no-)provision=[Enable or disable provisioning]'
      '--provision-with x,y,z=[Enable only certain provisioners, by type or by name]'
    )

    local -a ssh_arguments && ssh_arguments=(
      '--command=[Execute an SSH command directly]'
      '--plain=[Plain mode, leaves authentication up to user]'
      '--(no-)tty=[Enables tty when executing an ssh command (defaults to true)]'
    )

    local -a ssh_config_arguments && ssh_config_arguments=(
      '--host NAME=[Name the host or the config]'
    )

    local -a suspend_arguments && suspend_arguments=(
      '--all-global=[Suspend all running vms globally]'
    )

    local -a up_arguments && up_arguments=(
      '--(no-)provision=[Enable or disable provisioning]'
      '--provision-with x,y,z=[Enable only certain provisioners, by type or by name]'
      '--(no-)destroy-on-error=[Destroy machine if any fatal error happens (default to true)]'
      '--(no-)parallel=[Enable or disable parallelism if provider supports it]'
      '--provider=[Back the machine with a specific provider]'
      '--(no-)install-provider=[If possible, install the provider if it is not installed]'
    )

    local -a upload_arguments && upload_arguments=(
      '--temporary=[Upload source to temporary directory]'
      '--compress=[Use gzip compression for upload]'
      '--compression-type\=TYPE=[Type of compression to use (tgz, zip)]'
    )

    local -a validate_arguments && validate_arguments=(
      '--ignore-provider=[Ignores provider config options]'
    )

    local -a winrm_arguments && winrm_arguments=(
      '--command COMMAND=[Execute a WinRM command directly]'
      '--elevated=[Run with elevated credentials]'
      '--shell SHELL=[Use specified shell (powershell, cmd)]'
    )

    local -a winrm_config_arguments && winrm_config_arguments=(
      '--host NAME=[Name the host for the config]'
    )

    _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
      command)
        _describe -t commands 'command' sub_commands ;;
      options)
        case $line[1] in
          box)
             __vagrant-box ;;
          cloud)
            _arguments -s -S : $common_arguments ;;
          destroy)
            _arguments -s -S : $destroy_arguments $common_arguments ;;
          global-status)
            _arguments -s -S : $global_status_arguments $common_arguments ;;
          halt)
            _arguments -s -S : $halt_arguments $common_arguments ;;
          init)
            _arguments -s -S : $init_arguments $common_arguments ;;
          package)
            _arguments -s -S : $package_arguments $common_arguments ;;
          plugin)
            __vagrant-plugin ;;
          port)
            _arguments -s -S : $port_arguments $common_arguments ;;
          powershell)
            _arguments -s -S : $powershell_arguments $common_arguments ;;
          provision)
            _arguments -s -S : $provision_arguments $common_arguments ;;
          push)
            _arguments -s -S : $common_arguments ;;
          rdp)
            _arguments -s -S : $common_arguments ;;
          reload)
            _arguments -s -S : $reload_arguments $common_arguments ;;
          resume)
            _arguments -s -S : $resume_arguments $common_arguments ;;
          snapshot)
            __vagrant-snapshot ;;
          ssh)
            _arguments -s -S : $ssh_arguments $common_arguments ;;
          ssh-config)
            _arguments -s -S : $ssh_config_arguments $common_arguments ;;
          status)
            _arguments -s -S : $common_arguments ;;
          suspend)
            _arguments -s -S : $suspend_arguments $common_arguments ;;
          up)
            _arguments -s -S : $up_arguments $common_arguments ;;
          upload)
            _arguments -s -S : $upload_arguments $common_arguments ;;
          validate)
            _arguments -s -S : $validate_arguments $common_arguments ;;
          winrm)
            _arguments -s -S : $winrm_arguments $common_arguments ;;
          winrm-config)
            _arguments -s -S : $winrm_config_arguments $common_arguments ;;
        esac
      ;;
  esac
}

__vagrant-box ()
{
    local curcontext="$curcontext" state line
    typeset -A opt_args

    local -a box_common_arguments && box_common_arguments=(
      '--help[Print help message]'
    )

    local -a box_ca_arguments && box_ca_arguments=(
      '--cacert FILE[CA certificate for SSL download]'
      '--capath DIR[CA certificate directory for SSL download]'
      '--cert FILE[A client SSL cert, if needed]'
      '--insecure[Do not validate SSL certificates]'
    )

    local -a box_add_arguments && box_add_arguments=(
      '--clean[Clean any temporary download files]'
      '--force[Overwrite an existing box if it exists]'
      '--location-trustedTrust["Location" header from HTTP redirects and use the same credentials for subsequent urls as for the initial one]'
      '--provider PROVIDER[Provider the box should satisfy]'
      '--box-version VERSION[Constrain version of the added box]'
      '--checksum CHECKSUM[Checksum for the box]'
      '--checksum-type TYPE[Checksum type (md5, sha1, sha256)]'
      '-name BOX[Name of the box]'
    )

    local -a box_list_arguments && box_list_arguments=(
      '--box-info[Displays additional information about the boxes]'
    )

    local -a box_outdated_arguments && box_outdated_arguments=(
      '--global[Check all boxes installed]'
      '--force[Force checks for latest box updates]'
    )

    local -a box_prune_arguments && box_prune_arguments=(
      '--provider PROVIDER[The specific provider type for the boxes to destroy]'
      '--dry-run[Only print the boxes that would be removed]'
      '--name NAME[The specific box name to check for outdated versions]'
      '--force[Destroy without confirmation even when box is in use]'
      '--keep-active-boxes[When combined with `--force`, will keep boxes still actively in use]'
    )

    local -a box_remove_arguments && box_remove_arguments=(
      '--force[Remove without confirmation]'
      '--provider PROVIDER[The specific provider type for the boxes to destroy]'
      '--box-version VERSION[The specific version of the box to remove]'
      '--all[Remove all available versions of the box]'
    )

    local -a box_update_arguments && box_update_arguments=(
      '--box BOX[Update a specific box]'
      '--force[Overwrite an existing box if it exists]'
      '--provider PROVIDER[The specific provider type for the boxes to destroy]'
    )

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

   case $state in
       (command)
           _describe -t commands 'command' _box_arguments
           return
       ;;

       (options)
           case $line[1] in
              add)
                _arguments -s -S :  $box_add_arguments $box_ca_arguments $box_common_arguments ;;
              list)
                _arguments -s -S : $box_list_arguments $box_common_arguments ;;
              outdated)
                _arguments -s -S :  $box_outdated_arguments $box_ca_arguments $box_common_arguments ;;
              prune)
                _arguments -s -S :  $box_prune_arguments $box_common_arguments ;;
              remove)
                _arguments -s -S : $box_remove_arguments $box_common_arguments ':feature:__box_list' ;;
              repackage)
                _arguments -s -S : $box_common_arguments ':feature:__box_list' ;;
              update)
                _arguments -s -S : $box_update_arguments $box_ca_arguments $box_common_arguments ':feature:__box_list';;
           esac
       ;;
    esac
}

__vagrant-snapshot ()
{
    local curcontext="$curcontext" state line
    typeset -A opt_args

    local -a snapshot_common_arguments && snapshot_common_arguments=(
      '--help[Print help message]'
    )

    local -a snapshot_provision_arguments && snapshot_provision_arguments=(
      '--(no-)provision=[Enable or disable provisioning]'
      '--provision-with x,y,z=[Enable only certain provisioners, by type or by name]'
    )

    local -a snapshot_start_argument && snapshot_start_argument=(
      '--no-start=[Do not start the snapshot after the restore]'
    ) 

    local -a snapshot_pop_arguments && snapshot_pop_arguments=(
      '--no-delete=[Do not delete the snapshot after the restore]'
    )

    local -a snapshot_force_arguments && snapshot_force_arguments=(
      '--force=[Replace snapshot without confirmation]'
    )
    
    _arguments -C \
        ':command:->command' \
        '*::options:->options'

   case $state in
       (command)
           _describe -t commands 'command' _snapshot_arguments
           return
       ;;

       (options)
           case $line[1] in
              delete)
                _arguments -s -S : $snapshot_common_arguments ;;
              list)
                _arguments -s -S : $snapshot_common_arguments ;;
              pop)
                _arguments -s -S : $snapshot_pop_arguments $snapshot_start_argument $snapshot_provision_arguments $snapshot_common_arguments ;;
              push)
                _arguments -s -S : $snapshot_common_arguments ;;
              restore)
                _arguments -s -S : $snapshot_provision_arguments $snapshot_start_argument $snapshot_common_arguments ;;
              save)
                _arguments -s -S : $snapshot_force_arguments $snapshot_common_arguments ;;
           esac
       ;;
    esac
}

__vagrant-plugin ()
{
    local curcontext="$curcontext" state line
    typeset -A opt_args

    local -a plugin_common_arguments && plugin_common_arguments=(
      '--help[Print help message]'
    )

    local -a plugin_local_arguments && plugin_local_arguments=(
      '--localRemove plugin from local project]'
    )

    local -a plugin_install_arguments && plugin_install_arguments=(
      '--entry-point NAME[The name of the entry point file for loading the plugin]'
      '--plugin-clean-sources[Remove all plugin sources defined so far (including defaults)]'
      '--plugin-source PLUGIN_SOURCE[Add a RubyGems repository source]'
      '--plugin-version PLUGIN_VERSION[Install a specific version of the plugin]'
      '-local[Install plugin for local project only]'
      '--verbose[Enable verbose output for plugin installation]'
    )

    local -a plugin_expunge_arguments && plugin_expunge_arguments=(
      '--force[Do not prompt for confirmation]'
      '--local[Include plugins from local project for expunge]'
      '--local-only[Only expunge local project plugins]'
      '--global-only[Only expunge global plugins]'
      '--reinstall[Reinstall current plugins after expunge]'
    )

    _arguments -C \
        ':command:->command' \
        '*::options:->options'

   case $state in
       (command)
           _describe -t commands 'command' _plugin_arguments
           return
       ;;

       (options)
           case $line[1] in
              install)
                _arguments -s -S : $plugin_install_arguments $plugin_common_arguments ;;
              expunge)
                _arguments -s -S : $plugin_expunge_arguments $plugin_common_arguments ;;
              license)
                _arguments -s -S : $plugin_common_arguments ;;
              list)
                _arguments -s -S : $plugin_common_arguments ;;
              repair)
                _arguments -s -S : $plugin_local_arguments $plugin_common_arguments ':feature:__plugin_list' ;;
              uninstall)
                _arguments -s -S : $plugin_local_arguments $plugin_common_arguments ':feature:__plugin_list' ;;
              update)
                _arguments -s -S : $plugin_local_arguments $plugin_common_arguments ':feature:__plugin_list' ;;
           esac
       ;;
    esac
}