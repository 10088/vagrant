syntax = "proto3";

package hashicorp.vagrant;

option go_package = "github.com/hashicorp/vagrant/internal/server/proto/ruby_vagrant";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

import "plugin.proto";

// The service that is implemented for the server backend.
service RubyVagrant {
  // Gets available ruby plugins
  rpc GetPlugins(google.protobuf.Empty) returns (GetPluginsResponse);
  rpc ParseVagrantfile(ParseVagrantfileRequest) returns (ParseVagrantfileResponse);
}

/********************************************************************
* Plugins
********************************************************************/

message GetPluginsResponse {
  repeated Plugin plugins = 1;
}

message Plugin {
  // name of the plugin
  string name = 1;

  // type of the plugin
  Type type = 2;

  // Supported plugin types, the values here MUST match the enum values
  // in the Go sdk/component package exactly. A test in internal/server
  // validates this.
  enum Type {
    COMMAND = 0;
    COMMUNICATOR = 1;
    GUEST = 2;
    HOST = 3;
    PROVIDER = 4;
    PROVISIONER = 5;
    SYNCED_FOLDER = 6;
  }
}

/********************************************************************
* Vagrantfile
********************************************************************/

message ParseVagrantfileRequest {
  // Path to the Vagrantfile
  string path = 1;
  // TODO: might be good to add an option for passing cmd line args
}

message ParseVagrantfileResponse {
  // Vagrantfile representation
  sdk.Vagrantfile.Vagrantfile vagrantfile = 1;
}
